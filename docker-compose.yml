services:
  mysql:
    image: mysql
    #restart: always
    environment:
        DB_SERVER_PORT: 3306
        MYSQL_ROOT_PASSWORD: root
        MYSQL_HOST: 'docker-mysql'
        MYSQL_USER: 'user'
        MYSQL_DB: 'netcafe'
    healthcheck:
      test: ["CMD-SHELL", 'mysqladmin ping']
      interval: 10s
      timeout: 2s
      retries: 10
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '3306:3306'
    expose:
      - '3306'
    volumes:
      - ./.docker-volumes/mysql/db_data:/var/lib/mysql
  #alert_pub:
  #  build: ./PUB_DOCKERFILE
  #  command: python3 <NAME OF FILE>
  #  ports:
  #    - "8000:8000"
  #  environment:
  #    DATABASE_URL: postgres://todoapp@postgres/todos

  rabbitmq:
    image: rabbitmq:3.9-management
    container_name: 'rabbitmq'
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
        - ./.docker-volumes/rabbitmq/data/:/var/lib/rabbitmq/
        - ./.docker-volumes/rabbitmq/log/:/var/log/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 10
  datagen:
    depends_on:
       rabbitmq:
         condition: service_healthy
    container_name: 'datagen'
    build: ./datagen/.
    command: python3 -u /usr/datagen/src/datagen.py
  py_parser:
    container_name: 'py_parser'
    depends_on:
      rabbitmq:
        condition: service_healthy
      api:
        condition: service_healthy 
    build: ./pythonparser/.
    command: python3 /usr/parser/src/data_parser.py
  #mongodb:
  #  image : mongo
  #  container_name: mongodb
  #  volumes:
  #  - ./.docker-volumes/mongodb/db:/data/db
  #  ports:
  #  - 27017:27017
  #  restart: unless-stopped
  #mvn_app:
  #  build:
  #    context: ./api
  #    args:
  #      LOCAL_ENV: true
  #  volumes:
  #    - ./target/api.war:/usr/local/tomcat/webapps/api.war

  api:
    container_name: api
    image: maven-app:latest
    build: ./api
    ports:
      - 8080:8080
    depends_on:
      - 'mysql'
    command: ["./mvnw","spring-boot:run"]
    environment:
      - spring.datasource.url=jdbc:mysql://mysql:3306/mysql
      - spring.datasource.username=root
      - spring.datasource.password=root
      - spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
      - spring.jpa.hibernate.ddl-auto = update
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
  frontend:
    container_name: frontend

    build: ./frontend
    volumes:
      - ./.docker_volumes/react/:/app
      - /app/node_modules
    ports:
      - 3000:3000
    depends_on:
      - 'api'
    stdin_open: true
    command: npm start